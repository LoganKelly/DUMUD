#HELPS



-1 DIKU~
.                    Original game idea, concept, and design:

          Katja Nyboe               [Superwoman] (katz@freja.diku.dk)
          Tom Madsen              [Stormbringer] (noop@freja.diku.dk)
          Hans Henrik Staerfeldt           [God] (bombman@freja.diku.dk)
          Michael Seifert                 [Papi] (seifert@freja.diku.dk)
          Sebastian Hammer               [Quinn] (quinn@freja.diku.dk)


Developed at: DIKU -- The Department of Computer Science
                      at the University of Copenhagen.


~

-1 GOLD SILVER MONEY~
Midgaard's economy is based on gold and silver coinage (and the lowly copper,
which you as an adventurer are far too proud to carry).  Gold coins are worth
100 silver coins, but are also four times as heavy (25 to the pound, as 
opposed to 100 to the pound for silver). Gems can be bought to alleviate weight problems
from the Midgaard jeweller, he charges a mere 10% more than they are worth.
10 gems weigh one pound, and they can be worth more than 100 gold pieces for
the highest quality stones.
~

0 BRIEF COMPACT~
Brief and compact help set your display options for the game. Typing brief
toggles on and off the showing of room descriptions when you move around
(considerably reducing the text to be processed), and typing compact 
removes the extra blank line before your prompt.
~

-1 DEAF~
The deaf toggle turns off incoming tells, helpfull if you are being bombarded
by messages from other players.  You can still use reply (see 'help reply') to
reply to people who were telling you before you went deaf, although you
cannot reply to a deaf person unless you or they are a diety (it's mostly 
useful for sending a quick "I'm being spammed so I went deaf" message to
a person).
~

-1 AFK~
Typing AFK puts your character in a tell-saving mode as follows: any tell
to you is stored in a special buffer, and can be seen later by typing
recall.  This is useful when you need to leave the mud for 5 or 10 minutes,
but don't want to miss tells.  AFK shows up in your prompt until it is
turned off.

Tells to link-dead players are stored in a similar fashion, and can also be
seen by typing replay (unless, of course, the character logs off before
reading them).
~

-1 PROMPT~

{RPROMPT{x without an argument will turn your prompt on or off.
{RPROMPT ALL{x will give you the standard "<hits mana moves>" prompt.
{RPROMPT MORT{x will give you a more colorful and thorough prompt. {G*FOR MORTALS{x
{RPROMPT VAMP{x will give vampires a prompt containing blood points. {G*FOR VAMPIRES{x
{RPROMPT IMM{x will give immortals a more colorful and useful prompt. {G*FOR IMMORTALS{x
{RPROMPT <%*>{x where the %* are the various variables you may set yourself.
 
        %h :  Display your current hits
        %H :  Display your maximum hits
        %m :  Display your current mana
        %M :  Display your maximum mana
        %v :  Display your current moves
        %V :  Display your maximum moves
        %x :  Display your current experience
	%X :  Display experience to level
        %g :  Display your gold held
	%s :  Display silver carried
        %a :  Display your alignment
        %r :  Display the room name you are in
	%e :  Display the exits from the room in NESWDU style
	%c :  Display a carriage return (useful for multi-line prompts)
        %b :  Display the health of the mob you are currently fighting as a bar.
        %R :  Display the vnum you are in (IMMORTAL ONLY)
        %z :  Display the area name you are in (IMMORTAL ONLY)
 
Example:  PROMPT <%hhp %mm %vmv>
        Will set your prompt to "<10hp 100m 100mv>"
 
~
-1 SUMMARY~
MOVEMENT                            GROUP
north south east west up down       follow group gtell split
exits recall
sleep wake rest stand

OBJECTS                             INFORMATION / COMMUNICATION
get put drop give sacrifice         help credits commands areas
wear wield hold                     report score time weather where who
recite quaff zap brandish           description password title
lock unlock open close pick         bug idea typo
inventory equipment look compare    gossip cgossip say shout tell yell
eat drink fill                      emote pose
list buy sell value                 note

COMBAT                              OTHER
kill flee kick rescue disarm        ! save quit
backstab cast wimpy                 practice train


For more help, type 'help <topic>' for any command, skill, or spell.
Also help on: DAMAGE DEATH EXPERIENCE NEWS STORY TICK WIZLIST
~

0 DEATH~
When your character dies, you are reincarnated back at the Altar of the Temple
of Midgaard.  Your corpse is left behind in the room where you were killed,
together with all of your equipment.

Any spells which were affecting you are canceled by death.

Following and groups are not affected by death.

You lose experience points for dying.  The amount you lose is two-thirds of 
the way back to the beginning of your level.

Corpses decay after time, and the objects inside corpses decay with them.
Player corpses last *roughly* 30 hours of game time (15 minutes of real time).
Only the player who died, or someone in the same group, can retrieve objects
from a player's corpse.

~



0 EXPERIENCE LEVEL XP~
Your character advances in power by gaining experience.  You need a set 
amount of experience points for each level based on your creation points.

You gain experience by:

    being part of a group that kills a monster

You lose experience by:

    fleeing from combat
    recalling out of combat
    being the target of certain spells
    dying

The experience you get from a kill depends on several things: how many players
are in your group; your level versus the level of the monster; your alignment
versus the monster's alignment; how many of this monster have been killed
lately; and some random variation.
~



0 PET PETS~
You can buy pets in the pet shop.  You may own only one pet at a time, after 
the old one dies you may purchase a replacement.

New pets are planned for a shop in New Thalos.
~



0 TICK~
Many of the game actions are based upon interval timers, including combat,
most autonomous monster actions, hp/mana/move regeneration, spell duration,
weather, and area resetting.

Of these timers, the hp/mana/move regeneration timer is popularly called the
'tick'.  Ticks on this mud average 30 seconds of real time, but the actual
amount varies randomly from 15 seconds to 45 seconds.

Area resetting happens roughly every 3 minutes if no one is in the area; less
often (15 minutes) if some one is.  Also note that objects lying on the ground
will not be regenerated if anyone is in the area when it resets.
~



0 !~
Syntax: !

! repeats the last command you typed.
~

0 NORTH SOUTH EAST WEST UP DOWN~
Syntax: north
Syntax: south
Syntax: east
Syntax: west
Syntax: up
Syntax: down

Use these commands to walk in a particular direction.
~

0 COLOUR COLOR ANSI~
Syntax: colour    Toggles colour mode on/off

        You may also talk in colour; the format is like this:
	the 'escape character' to specify a colour is the left
	handed brace '{{', following 
	that you should use one of the following letters,
		{r{{r     red     {c{{c     cyan
		{g{{g     green   {y{{y     yellow
		{b{{b     blue    {w{{w     white
		{m{{m     magenta {x{{x     clear(reset colour)
		{{{{      {{ char {{*       beep
		{{/       newline
	when using colour, it looks better if you finish the line
	with whatever colour it would normally be in, such as a
	gossip, the colour is magenta, so:
		{mLope gossips '{ghello,{r world{m'{x
	looks better than:
		{mLope gossips '{ghello,{r world'{x

	Upper-case letters result in bold colors.

	ColoUr is written by Lope (ant@solace.mh.se)
~

0 ZENDT 'SMELLY ZENDT' 'SMELLY OLD ZENDT'~

He is teh suck.  OMG, teh n00b is GG!

{BSUCK IT BITCHEZZZZZ!{x
~

0 CAST~
Syntax: cast <spell> <target>

Before you can cast a spell, you have to practice it.  The more you practice,
the higher chance you have of success when casting.  Casting spells costs mana.
The mana cost decreases as your level increases.

The <target> is optional.  Many spells which need targets will use an
appropriate default target, especially during combat.

If the spell name is more than one word, then you must quote the spell name.
Example: cast 'cure critic' frag.  Quoting is optional for single-word spells.
You can abbreviate the spell name.

When you cast an offensive spell, the victim usually gets a saving throw.
The effect of the spell is reduced or eliminated if the victim makes the
saving throw successfully.

See also the help sections for individual spells.
~

0 EXITS~
Syntax: exits

Tells you the visible exits of the room you are in.  Not all exits are visible.
You can use the 'bump' technique to find hidden exits.  (Try to walk in a
certain direction and see what you bump into).
~

0 DROP GET GIVE PUT TAKE~
Syntax: drop <object>
Syntax: drop <amount> coins
Syntax: get  <object>
Syntax: get  <object> <container>
Syntax: give <object> <character>
Syntax: give <amount> coins <character>
Syntax: put  <object> <container>

DROP drops an object, or some coins, on the ground.

GET gets an object, either lying on the ground, or from a container, or even
from a corpse.  TAKE is a synonym for get.

GIVE gives an object, or some coins, to another character.

PUT puts an object into a container.

DROP, GET and PUT understand the object names 'ALL' for all objects and
'ALL.object' for all objects with the same name.
~

0 EQUIPMENT INVENTORY~
Syntax: equipment
Syntax: inventory

EQUIPMENT lists your equipment (armor, weapons, and held items).
INVENTORY lists your inventory.
~

0 COMPARE~
Syntax: compare <object-1> <object-2>
Syntax: compare <object>
 
COMPARE compares two objects in your inventory.  If both objects are weapons,
it will report the one with the better average damage.  If both objects are
armor, it will report the one with the better armor class.
 
COMPARE with one argument compares an object in your inventory to the object
you are currently wearing or wielding of the same type.
 
COMPARE doesn't consider any special modifiers of the objects.
~

0 FLEE~
Syntax: flee
Syntax: rescue   <character>

Once you start a fight, you can't just walk away from it.  If the fight
is not going well, you can attempt to FLEE, or another character can
RESCUE you.  (You can also RECALL, but this is less likely to work,
and costs more experience points, then fleeing).

If you lose your link during a fight, then your character will keep
fighting, and will attempt to RECALL from time to time.  Your chances
of making the recall are reduced, and you will lose much more experience.
~

0 EXAMINE LOOK~
Syntax: look
Syntax: look    <object>
Syntax: look    <character>
Syntax: look    <direction>
Syntax: look    <keyword>
Syntax: look in <container>
Syntax: look in <corpse>
Syntax: examine <container>
Syntax: examine <corpse>

LOOK looks at something and sees what you can see.

EXAMINE is short for 'LOOK container' followed by 'LOOK IN container'.
~

0 ORDER~
Syntax: order <character> command
Syntax: order all command

ORDER orders one or all of your charmed followers (including pets) to
perform any command.  The command may have arguments.  You are responsible
for the actions of your followers, and others who attack your followers
will incur the same penalty as if they attacked you directly.

Most charmed creatures lose their aggresive nature (while charmed).

If your charmed creature engages in combat, that will break the charm.
~

0 REST SLEEP STAND WAKE~
Syntax: rest
Syntax: sleep
Syntax: stand
Syntax: wake

These commands change your position.  When you REST or SLEEP, you 
regenerate hit points, mana points, and movement points faster.
However, you are more vulnerable to attack, and if you SLEEP,
you won't hear many things happen.

Use STAND or WAKE to come back to a standing position.  You can
also WAKE other sleeping characters.
~

0 GTELL ; REPLY SAY TELL~
Syntax: gtell <message>
Syntax: say   <message>
Syntax: tell  <character> <message>

All of these commands send messages to other players.  GTELL sends a message to
all of the characters in your group, wherever they are, even if they are
sleeping or stunned or dying.  ';' is a synonym for GTELL.

SAY sends a message to all awake players in your room.  The single quote '''
is a synonym for SAY.

TELL sends a message to one awake player anywhere in the world.

REPLY sends a message to the last player who sent you a TELL.  REPLY will work
even if you can't see the player, and without revealing their identity.  This
is handy for talking to invisible or switched immortal players.
~

-1 NOTE NOTES CHANGES NEWS PENALTY IDEA UNREAD~
The notes on ROM replace the bulletin boards and mail systems found on many
other mud.  The following options are usable:

reading notes:
note list	: show all notes (unread notes are marked with an N)
note read	: either by number, or read next to read unread notes
note remove	: removes a note that you wrote or are the target of
note catchup	: markes all notes as read

writing new notes:
note to		: sets the to line (playername, clanname, immortal, or all)
note subject	: sets the subject for a new note
note +		: adds a line to a new note (i.e. note + hi guys!)
note -		: remove a line from a note in progress
note clear	: erase a note in progress
note show	: shows the note you are working on
note post	: posts a new note. This MUST be done to post a note.

When you log in, you will be informed if there are unread notes waiting. Type
note read to scroll through them one at a time.

Four other note directories exist, these are ideas, news, changes, and 
penalties (gods only).  They are used the exact same way, for example
idea read 5 will read idea #5.  Posting to the news and changes boards is
restricted. The 'unread' command can be used to show your unread notes on
all the note spools.
~
0 GOSSIP CGOSSIP . SHOUT YELL~
Syntax: gossip  <message>
Syntax: cgossip <message>
Syntax: shout   <message>
Syntax: yell    <message>

SHOUT sends a message to all awake players in the world.  To curb excessive
shouting, SHOUT imposes a three-second delay on the shouter.

GOSSIP and CGOSSIP are variants of SHOUT (without the delay).  '.' is a 
synonym for GOSSIP.

YELL sends a message to all awake players within your area.

Type a channel name by itself to turn it off.
~

0 EMOTE PMOTE POSE SOCIAL~
Syntax: emote <action>
Syntax: pose

EMOTE is used to express emotions or actions.  Besides EMOTE, there are
several dozen built-in social commands, such as CACKLE, HUG, and THANK
(type socials or help socials for a listing).

PMOTE is similar to emote, but will substitute you and your for a target's
name (i.e. pmote bonks Alander will be read as bonks you by Alander, and
as bonks Alander by everyone else).

POSE produces a random message depending on your class and level.
~

52 SMOTE~
Syntax: smote <action>

Smote works exactly like pmote, except you must place your name somewhere in
the string, and it will show that string to everyone in the room.
~

0 HOLD REMOVE WEAR WIELD~
Syntax: hold   <object>
Syntax: remove <object>
Syntax: wear   <object>
Syntax: wear   all
Syntax: wield  <object>

Three of these commands will take an object from your inventory and start using
it as equipment.  HOLD is for light sources, wands, and staves.  WEAR is for
armor.  WIELD is for weapons.

WEAR ALL will attempt to HOLD, WEAR, or WIELD each suitable item in your
inventory.

You may not be able to HOLD, WEAR, or WIELD an item if its alignment does not
match yours, if it is too heavy for you, or if you are not experienced enough
to use it properly.

REMOVE will take any object from your equipment and put it back into your
inventory.
~


0 BUG TYPO~
Syntax: bug <message>
Syntax: idea <message>
Syntax: typo <message>

These commands will take your message and record it into a file as feedback
to the mud implementors.
~

0 CREDITS~
Syntax: credits

This command shows the list of the original Diku Mud implementors.
~

0 AREAS COMMANDS REPORT SCORE TIME~
Syntax: areas
Syntax: commands
Syntax: report
Syntax: score
Syntax: time
Syntax: weather

AREAS shows you a list of areas in the game.

COMMANDS shows you all the commands in the game.

REPORT shows your current statistics to you and also announces them to other
players in the room.  SCORE shows much more detailed statistics to you only.
Your ability scores are shown as true value(current value), so for example
Str: 15(23) means you have a 15 strength from training, but a 23 strength
from other factors (spells or items).

TIME shows the game time, as well as the time the mud was last started,
and the current local time for the host computer.

WEATHER shows the current game weather.
~

-1 WHO~
Syntax: who
Syntax: who <level-range>
Syntax: who <class or race>
Syntax: who <clan name>
Syntax: who <class or race> <level-range> <clan name>

WHO shows the people currently in the game.  Some people may choose to
remain unseen and won't appear on the WHO
 
WHO without any arguments shows all of the (visible) people currently playing.

With arguments, WHO can show players of certain classes or levels.
For example:
 
who 10          lists all players of level 10 or above
who 15 20       lists all players between level 15 and 20
who cleric      lists all clerics playing
who immortal    lists all immortals playing
who cleric 1 5  lists all clerics between levels 1 and 5
who elf cleric  lists all elven clerics
who demise e m  lists all elven mages in Demise (hi Alander!)

Classes and races may be abbreviated.
~

-1 WHOIS~
Syntax: whois <name>
The whois command identifies any user who matches the name given. For
example, 'whois a' shows all characters whose name begins with A.
~

0 WHERE~
Syntax: where
Syntax: where <character>

WHERE without an argument tells you the location of visible players in the same
area as you are.

WHERE with an argument tells you the location of one character with that name
within your area, including monsters.
~

0 HELP~
Syntax: help
Syntax: help <keyword>

HELP without any arguments shows a one-page command summary.

HELP <keyword> shows a page of help on that keyword.  The keywords include
all the commands, spells, and skills listed in the game.
~

0 DESCRIPTION DESC~
Syntax: description <string>
Syntax: description + <string>
Syntax: description - 

Sets your long description to the given string.  If the description string
starts with a '+', the part after the '+' is appended to your current
description, so that you can make multi-line descriptions. You can delete
lines by uses description -.
~

0 PASSWORD~
Syntax: password <old-password> <new-password>

PASSWORD changes your character's password.  The first argument must be
your old password.  The second argument is your new password.

The PASSWORD command is protected against being snooped or logged.
~

0 TITLE~
Syntax: title <string>

Sets your title to a given string.

The game supplies a title when your character is created.  You can use 
TITLE to set your title to something else.
~

0 NAMECOLOR~
Syntax: namecolor <string>

Sets your name to a given string, which must be spelled the same and
be in the same case as your original name.

Characters names are uncolored by default, all players are able to use
this command to set their name to colors of their choosing.

~

0 WIMPY~
Syntax: wimpy
Syntax: wimpy <number>

WIMPY sets your wimpy value.  When your character takes damage that reduces
your hit points below your wimpy value, you will automatically attempt to flee.
You will only flee if your character is not in a wait state -- i.e. has not
been using combat commands like cast, trip and bash, and has not been
tripped or bash by an enemy.

WIMPY with no argument sets your wimpy value to 20% of your maximum hit points.

Some monsters are wimpy.
~

0 OPEN CLOSE LOCK UNLOCK PICK~
Syntax: open   <object|direction>
Syntax: close  <object|direction>
Syntax: lock   <object|direction>
Syntax: unlock <object|direction>
Syntax: pick   <object|direction>

OPEN and CLOSE open and close an object or a door.

LOCK and UNLOCK lock and unlock a closed object or door.  You must have
the requisite key to LOCK or UNLOCK.

PICK can open a lock without having the key.  In order to PICK successfully,
you must practice the appropriate skill.
~

0 DRINK EAT FILL POUR~
Syntax: drink <object>
Syntax: eat   <object>
Syntax: fill  <object>
Syntax: pour  <object> out
Syntax: pour  <object> <object>
Syntax: pour  <object> <character>

When you are thirsty, DRINK something.

When you are hungry, EAT something.

FILL fills a drink container with water.

POUR transfers a liquid to a container, or empties one.
You can also pour from an object into something a character is holding.
~

0 BUY LIST SELL VALUE~
Syntax: buy   <object>
Syntax: list
Syntax: sell  <object>
Syntax: value <object>

BUY buys an object from a shop keeper.
When multiple items of the same name are listed, type 'buy n.item', where n
is the position of the item in a list of that name.  So if there are two
swords, buy 2.sword will buy the second. If you want to buy multiples of
an item, use an * (buy 5*pie will buy 5 pies).  These can be combined into
(for example) buy 2*2.shield, as long as the * is first.  

LIST lists the objects the shop keeper will sell you.
List <name> shows you only objects of that name.

SELL sells an object to a shop keeper.

VALUE asks the shop keeper how much he, she, or it will buy the item for.
~

0 SACRIFICE~
Syntax: sacrifice <object>

SACRIFICE offers an object to Mota, who may reward you.
The nature of the reward depends upon the type of object.
~

0 SCROLL~
Syntax: scroll
Syntax: scroll <number>

This command changes the number of lines the mud sends you in a page (the 
default is 24 lines).  Change this to a higher number for larger screen
sizes, or to 0 to disabling paging.
~

0 BRANDISH QUAFF RECITE ZAP~
Syntax: brandish
Syntax: quaff    <potion>
Syntax: recite   <scroll> <target>
Syntax: zap      <target>
Syntax: zap

BRANDISH brandishes a magical staff.  QUAFF quaffs a magical potion (as opposed
to DRINK, which drinks mundane liquids).  RECITE recites a magical scroll; the
<target> is optional, depending on the nature of the scroll.  ZAP zaps a
magical wand at a target.  If the target is not specified, and you are fighting
someone, then that character is used for a target.

You must HOLD a wand or a staff before using BRANDISH or ZAP.

All of these commands use up their objects.  Potions and scrolls have a single
charge.  Wands and staves have multiple charges.  When a magical object has no
more charges, it will be consumed.

These commands may require an item skill to be succesful, see the help entries
on the skills scrolls, staves, and wands for more information.
~

0 CONSIDER~
Syntax: consider <character>

CONSIDER tells you what your chances are of killing a character.
Of course, it's only a rough estimate.
~

0 FOLLOW GROUP~
Syntax: follow <character>
Syntax: group
Syntax: group <character>

FOLLOW starts you following another character.  To stop following anyone else,
just FOLLOW <yourself>.

GROUP <character> makes someone who is following you a member of your group.
Group members share experience points from kills and may use the GTELL and
SPLIT commands.  If anyone in your group is attacked, you will automatically
join the fight.

If the <character> is already a member of your group, then GROUP will
kick out the <character> from your group.  Characters can also leave your
group by using a FOLLOW command to stop following you.

GROUP with no argument shows statistics for each character in your group.

You may FOLLOW and GROUP only with characters who are within five levels of
your own.
~

0 VISIBLE~
VISIBLE cancels your hiding and sneaking, as well as any invisibility,
making you visible again.
~

0 QUIT RENT SAVE~
Syntax: QUIT
Syntax: RENT ... not!
Syntax: SAVE

SAVE saves your character and object.  The game saves your character every
15 minutes regardless, and is the preferred method of saving.  Typing save
will block all other command for about 20 seconds, so use it sparingly.
(90+ players all typing save every 30 seconds just generated too much lag)

Some objects, such as keys and potions, may not be saved.

QUIT leaves the game.  You may QUIT anywhere.  When you re-enter the game 
you will be back in the same room.

QUIT automatically does a SAVE, so you can safely leave the game with just one
command.  Nevertheless it's a good idea to SAVE before QUIT.  If you get into
the habit of using QUIT without SAVE, and then you play some other mud that
doesn't save before quitting, you're going to regret it.

There is no RENT in this mud.  Just SAVE and QUIT whenever you want to leave.
~

0 RECALL /~
Syntax: RECALL

RECALL prays to Mota for miraculous transportation from where you are
back to the Temple of Midgaard.  '/' is a synonym for RECALL.

If you RECALL during combat, you will lose experience (more than for fleeing),
and you will have a chance of failing (again, more than for fleeing).  This
chance is based on your recall skill, although a 100% recall does not 
insure success.

RECALL costs half of your movement points.

RECALL doesn't work in certain god-forsaken rooms.  Characters afflicted by a
curse may not recall at all.
~

-1 SPLIT~
Syntax: SPLIT <silver> <gold>

SPLIT splits some coins  between you and all the members of your
group who are in the same room as you.  It's customary to SPLIT
the loot after a kill.  The first argument is the amount of silver
the split (0 is acceptable), and the second gold (optional).
Examples:
split 30 	--> split 30 silver
split 20 50	--> split 20 silver, 50 gold
split  0 10	--> split 10 gold
~

0 STEAL~
Syntax: STEAL coins <character>
Syntax: STEAL <object> <character>

STEAL attempts to steal coins, or an object, from a character.

There are penalties for using STEAL on other players.

In order to STEAL successfully, you must practice the appropriate skill.
~

0 PRACTICE~
Syntax: PRACTICE
Syntax: PRACTICE <skill|spell>

PRACTICE without an argument tells you your current ability level in all
the skills and spells available to you.  You can check this anywhere.

PRACTICE with an argument practice that skill or spell.  Your learning
percentage varies from 0% (unlearned) to a some maximum between 80% and 100%,
depending on your class.  You must be at a guild master to practice.

The higher your intelligence, the more you will learn at each practice
session.  The higher your wisdom, the more practice sessions you will
have each time you gain a level.  Unused sessions are saved until you
do use them.
~

0 TRAIN~
Syntax: train <str int wis dex con hp mana>

TRAIN increases one of your attributes.  When you start the game, your
character has standard attributes based on your class, and several
initial training sessions.  You can increase your attributes by
using these sessions at a trainer (there are several in town).

It takes one training session to improve an attribute, or to increase
mana or hp by 10.  You receive one session per level.

The best attributes to train first are WIS and CON.  WIS gives you more
practice when you gain a level.  CON gives you more hit points.
In the long run, your character will be most powerful if you train
WIS and CON both to 18 before practising or training anything else.
~

60 ADVANCE~
Syntax: advance <character> <level>

ADVANCE sets a character's level to the specified value.  It is the
only way to create new immortal characters within the game.  ADVANCE
may also be used to demote characters.
~

60 TRUST~
Syntax: trust <character> <level>

TRUST sets a character's trust to the specified level.  This is similar to
advancing the character for accessing immortal commands, but has no effect
on combat strength, et cetera.  You can give more trust to mortal (or
immortal) characters to give them access to more power without messing up
the character.  You can also restrict a player's trust to less than their
natural level.

A trust of 0 means to use the character's natural level again.
~

58 ALLOW BAN PERMBAN~
Syntax: allow   <site>
	ban     <site> <newbies|all|permit>
	ban

BAN <site> prohibits players from that site from logging in.  BAN with
no arguments lists the banned sites.  ALLOW <site> removes a site from
the ban list, if the remover is of equal or higher level than the banner.

A site may have all players, new players, or non-permitted players (set
by editing the player file) banned, by changing the argument after the site.
*s may be used to ban either by suffix (*.edu), prefix (labmac*), or 
content (*andrews*), but be careful not to accidently lock out too many
sites with a wildcard.  Bans do not save unless the permban command is used.
~

59 REBOOT SHUTDOWN~
Syntax: reboot
	shutdown

Reboot shuts down the server.  When the normal 'startup' script is used
to control the server, a delay of fifteen seconds will ensue (to allow
old connections to die), followed by a reboot.

Shutdown shuts down the server and prevents the normal 'startup' script
from restarting it.
~


56 WIZLOCK NEWLOCK~
Syntax: wizlock
	newlock

Wizlock and newlock both block login attempts to ROM. Wizlock locks
out all non-gods (i.e. level less than 51), except for link-dead players who
are returning.  Newlock only locks out new character generation, typically
used for preventing a spammer from returning.  Wizlocking should be avoided,
and newlocking should be accompanied by mail or a note to the imps.

A god must be at least Supreme level to wizlock the game.
~

59 DENY~
Syntax: deny <name>

Deny locks a character out of a game permanently, rendering their character
name unusable.  It may only be removed by editing the file, for this reason
freeze is usually preferred.
~

57 DISCONNECT~
Syntax: disconnect <name>

Disconnect breaks a player's link to the game, dumping them back to the telnet
prompt.  This is a non-lethal way of getting rid of spammers and annoying
players.
~

57 FREEZE~
Syntax: freeze <name>

FREEZE <character> is a toggle which prevents a character from issuing any
commands at all. It can be removed from within the game, so freezing a 
troublemaker is usually a better option than they deny command.
~

53 FORCE~
Syntax: force <character> <command>
Syntax: force all <command>

FORCE forces one character to execute a command, except of course delete.

Below level 57 (Deity) force can only be used on mobiles, and force all is
unavailable.  You also cannot 'force orc murder hugo', for example. 

FORCE 'all' forces all player characters to execute a command.
This is typically used for 'force all save'.
~

56 SOCKETS~
Syntax: sockets
	sockets <name> 

SOCKETS reports all of the visible users connected to the server, including 
users in the process of logging in.  The two numbers inside brackets are the 
channel number and the 'connected' state.  The 'connected' states are listed in 
merc.h: 0 is CON_PLAYING; non-zero values are various states of logging in.

The optional name argument shows the site of a player, or optional can be used
to identify switched gods (i.e. socket orc shows the name of anyone switched
into an orc).
~

56 LOAD~
Syntax: load mob <vnum>
	load obj <vnum> <level>

The load command is used to load new objects or mobiles (use clone to 
duplicate strung items and mobs).  The vnums can be found with the vnum
command, or by stat'ing an existing mob or object.

Load puts objects in inventory if they can be carried, otherwise they are
put in the room.  Mobiles are always put into the same room as the god. Old
format objects must be given a level argument to determine their power, new
format objects have a preset level that cannot be changed without set.
(see also clone, vnum, stat)
~

58 SET~
Syntax: set mob   <mobile> <field> <value>
	set obj   <object> <field> <value>
	set room  <number> <field> <value>
	set skill <char>   <name>  <rating>
	set skill <char>   all     <rating>

The set command is used to change the numerical values of the various data
structures. Type set <class> without an argument to see a listing of options.
Set skill all (pc's only) will set all the character's skills to the value
given.  Use string to change the strings on an object or mobile.
(see also string, stat)
~

55 STRING~
Syntax: string obj <field> <string>
	string mob <field> <string>

The string command changes the various strings associated with an object or
mobile.  A full list of fields can be viewed by typing string obj or string
mob.  Sorry, multi-line strings are not yet supported.
~

55 NOCHANNEL NOEMOTE NOSHOUT NOTELL~
Syntax: nochannel <character>
	noemote   <character>
	noshout   <character>
	notell    <character>

Noemote, noshout, and notell are used to muffle other characters, by
preventing them from emoting, shouting, and telling, respectively.
Characters who are noshout'ed or no'telled will also not receive those
forms of communication.

The nochannel command is similar, but more drastic. It prevents the victim
from using any of the channels (gossip, cgossip, Q/A, music) on the game.
Nochannels usually result from swearing or spamming on public channels.
~

57 PARDON~
Syntax: pardon <character> killer
	pardon <character> thief

Pardon pardons a player for their crimes.  Don't pardon a player unless you
are sure they deserve it.  Being killed by Hassan acts as an automatic
pardon.
~

56 PURGE~
Syntax: purge
	purge <character>

Purge is used to clean up the world.  Purge with no arguments removes all the
NPC's and objects in the current room.  Purge with an argument purges one
character from anywhere in the world.

Purge will not get rid of PC's, or objects or mobiles with a NOPURGE flag
set (i.e. the pit, the fountain, shopkeepers, Hassan).  Mobiles may be
purged if they are called directly by name.
~

56 RESTORE~
Syntax: restore <character>
	restore room
	restore all

Restore restores full hit points, mana points, and movement points to the
target character.  It also heals poison, plague, and blindness.

Restore room (or restore with no argument) performs a restore on every player
in the room, restore all does the same for all connected players. Restore all
is only usable by creators and implementors.  Restore should be used sparingly
or not at all.
~

57 SLAY~
Syntax: slay <character>

Slay kills a character in cold blood, no saving throw.  Best not to use this
command on players if you enjoy being a god.
~

55 TRANSFER TELEPORT~
Syntax: transfer <character>
	transfer all
	transfer <character> <location>
	transfer all         <location>

Transfer transfers the target character, or ALL player characters,
to your current location (default) or to a specified location. Trans all 
should almost never be used, as 100 players popping into one room can have
horrible effects on slow links. Teleport is a synonym for transfer. 
~

54 AT~
Syntax: at <location> <command>

At executes the given command (which may have arguments) at the given
location.  The location may be specified as a vnum, as the name of
a mobile, or as the name of an object.

At works by temporarily moving you to that location, executing the
command, and then moving you back (if the command didn't change your
location).
~

54 ECHO GECHO PECHO~
Syntax: echo  <message>
	gecho <message>
	pecho <character> <message>

These commands all perform similar functions.  Echo sends the message to
all characters in the same room as the user, with no indication of who sent
it.  Gecho does the same for all players connected to the game, and pecho
sends the message to the player specified as the target.  Any higher-level
god will see a prompt in front of your message, informing him or her that it
is an echo.
~

52 GOTO~
Syntax: goto <location>

Goto takes you to a location.  The location may be specified as a vnum,
as the name of a mobile, or as the name of an object.

You may not Goto a room if it is PRIVATE and has two (or more) characters
already present, or if it is SOLITARY and has one (or more) characters
already present. Some other rooms are barred to players below a certain
god level.

Implementors can use the violate command to get into private rooms.
~

52 HOLYLIGHT INVIS WIZINVIS~
Syntax: holylight
	wiznvis <level>

Holylight is a toggle that allows you to see (almost) every character and
mobile in the game.  With holy light, you can see what's in the game more
easily.  Without holy light, you can see what mortal players see.

Wizinvis takes a level argument, and will mke you invisible to all players of
a lower level than your invisibility level.  It defaults to the maximum
(your level) if no argument is given.  Wizi 60 characters are totally 
invisible.
~

52 INCOGNITO~
Toggling your incognito status will hide your presence from people outside the
room you are in, but leave you visible to those who are with you.  It takes
a level argument similar to wizinvis, people at that level or higher can see
you regarless of location.
~ 

52 MEMORY~
Syntax: memory

Memory reports the size of your mud.

The 'Mobs' and 'Objs' lines report the number of types of mobiles and objects,
not the number of instances currently in the game.

The 'Strings' line shows memory used by area-file strings.  These strings have
a maximum limit, which is also shown.

The 'Perms' line shows permanently allocated memory blocks.  There is no limit
on the number and size of these blocks.
~

56 VNUM~
Syntax: vnum <name>
	vnum <obj or mob> <name>
	vnum skill <name>

Vnum finds all objects and mobiles with a particular name, and prints out
the results.  Use vnum obj or vnum mob to limit the search.  This vnum is
very useful for loading. Vnum skill returns the skill number (for set) and
the slot number (for making new zones) of a skill name.
(see also load)
~

53 STAT~
Syntax: stat <name>
	stat mob  <name>
	stat obj  <name>
	stat room <number>

The stat command gives you detailed information on an object, mobile, or room
within the game.  Without a class argument, the command will return a object
(if found), a mobile (if no object exists, but a mobile does), or a room 
(if a number is  given).  Stat room with no argument stats the room you are
standing in.  Stat can be used to find room vnums for goto.
(see also goto, transfer)
~

53 MWHERE~
Syntax: mwhere <name>

Mwhere shows you the locations of all mobiles with a particular name.
~

55 PEACE~
Syntax: peace

Peace causes all characters in a room to stop fighting. It also strips the
AGGRESSIVE bit from mobiles.
~

52 POOFIN POOFOUT~
Syntax: poofin  <message>
Syntax: pooffout <message>

The standard messages for goto are 'arrives in a swirling mist' and
'leaves in a swirling mist'.  You can replace these messages with messages of
your own choosing using the poofin and poofout commands.  These messages
must include your name somewhere in the string.

Poofin and poofout only show to characters who can see you.
(see also goto)
~

59 PROTECT~
Syntax: protect <character>

Protect is used to protect a character from unwanted snooping.  Removing 
protected status from a character WILL be seen by that character.
~

55 LOG SNOOP~
Syntax: log   <character>
	log   all
	snoop <character>

Log <character> causes all of a character's commands to be logged into
the server's log file.  Like Freeze, it is a permanent character toggle.
Logs may only be used by creators and implementors, and should be accompanied
by mail to the implementors.

Certain commands (Password) are protected against log.  Conversely, certain
commands (especially immortal commands) are always logged.

Log all logs all character commands.  It is a server-wide toggle; it does not
persist across reboots. Please do not use this unless you tell the imps.

Snoop shows you a copy of all the input and output going to a character.
The character must have an open channel.  You may snoop more than one
character at a time. Try to respect privacy.

Snoop yourself to cancel all outstanding snoops.
~

54 SWITCH RETURN~
Syntax: switch <character>
	return

Switch switches you into the body of another character (who must not
already have a descriptor, e.g. you can't switch into a PC). You also cannot
switch into link-dead PCs.

Return returns you to your original body.
~

51 IMMTALK :~
Syntax: immtalk <message>
	immtalk

Immtalk sends a message to all immortals.  : is a synonym for immtalk.
Using this command with no argument turns off the immortal channel (or
turns it back on).
~

52 WIZNET~
Syntax: wiznet 
	wiznet show
	wiznet status
	wiznet <field>

Wiznet is sort of an immortal news service, to show important events to
the wiznetted immoral.  Wiznet by itself turns wiznet on and off, 
wiznet show lists all settable flags (they are not detailed here), 
wiznet status shows your current wiznet settings, and wiznet <field> toggles
a field on and off.  The events should be self-explanatory, if they are not,
fiddle with them a while.  More events are available at higher levels.
~
51 WIZHELP~
Syntax: wizhelp

Wizhelp provides a list of all the immortal commands.
~

0 ARMOR~
Syntax: cast armor <character>

This spell decreases (improves) the armor class of the target character
by 20 points.
~

0 BLESS~
Syntax: cast bless <character>
Syntax: cast bless <object>

This spell improves the to-hit roll and saving throw versus spell of the
target character by 1 for every 8 levels of the caster. It may also be
cast on an object to temporarily bless it (blessed weapons, for example,
are more effective against demonic beings).
~

0 BLINDNESS~
Syntax: cast blindness <victim>

This spell renders the target character blind.
~

0 'ACID BLAST' 'BURNING HANDS' 'COLOUR SPRAY' FIREBALL 'LIGHTNING BOLT'
  'MAGIC MISSILE' 'SHOCKING GRASP'~
Syntax: cast 'acid blast'     <victim>
Syntax: cast 'burning hands'  <victim>
Syntax: cast 'colour spray'   <victim>
Syntax: cast 'fireball'       <victim>
Syntax: cast 'lightning bolt' <victim>
Syntax: cast 'magic missile'  <victim>
Syntax: cast 'shocking grasp' <victim>

These spells inflict damage on the victim.  The higher-level spells do
more damage.
~

0 'CALL LIGHTNING'~
Syntax: cast 'call lightning'

This spell works only out of doors, and only when the weather is bad.
It calls down lightning bolts from Mota.
~

0 'CAUSE LIGHT' 'CAUSE SERIOUS' 'CAUSE CRITICAL' HARM~
Syntax: cast 'cause light'    <victim>
Syntax: cast 'cause serious'  <victim>
Syntax: cast 'cause critical' <victim>
Syntax: cast harm             <victim>

These spells inflict damage on the victim.  The higher-level spells do
more damage.
~

53 'CHANGE SEX'~
Syntax: cast 'change sex' <victim>

This spell changes the sex of the victim (temporarily).
~

0 'CHARM PERSON'~
Syntax: cast 'charm person' <victim>

This spell, if successful, causes the victim to follow you and to take orders
from you.  Use ORDER to order your charmed followers.

You are responsible for the actions of your followers.  Conversely, other
people who attack your followers will be penalized as if they attacked you.
~

0 'CHILL TOUCH'~
Syntax: cast 'chill touch' <victim>

This spell inflicts damage on the victim and also reduces the victim's
strength by one.
~

0 'CONTINUAL LIGHT'~
Syntax: cast 'continual light'
Syntax: cast 'continual light' <object>

This spell creates a ball of light, which you can hold as a light source.
The ball of light will last indefinitely. It may also be used on an object
to give it an enchanted glow.
~

0 'CONTROL WEATHER'~
Syntax: cast 'control weather' better
Syntax: cast 'control weather' worse

This spell makes the weather either better or worse.
~

0 'CREATE FOOD'~
Syntax: cast 'create food'

This spell creates a Magic Mushroom, which you or anyone else can eat.
~

0 'CREATE SPRING'~
Syntax: cast 'create spring'

This spell brings forth a magical spring from the ground, which has the
same properties as a fountain.
~

0 'CREATE WATER'~
Syntax: cast 'create water' <drink-container>

This spell replenishes a drink container with water.
~

0 'CURE BLINDNESS'~
Syntax: cast 'cure blindness' <character>

This spell cures blindness in one so unfortunate.
~

0 'CURE POISON'~
Syntax: cast 'cure poison' <character>

This spell cures poison in one so unfortunate.
~

0 'CURE LIGHT' 'CURE SERIOUS' 'CURE CRITICAL' HEAL~
Syntax: cast 'cure light'    <character>
Syntax: cast 'cure serious'  <character>
Syntax: cast 'cure critical' <character>
Syntax: cast 'heal'          <character>

These spells cure damage on the target character.  The higher-level spells
heal more damage.

(see 'help healer' for details on the heal command)
~

0 CURSE~
Syntax: cast 'curse' <character>

This spell reduces the character's to-hit roll and save versus spells.
It also renders the character unclean in the eyes of Mota and
unable to RECALL. Curse may be used to fill equipment with evil power,
allowing (for example) weapons to do more damage to particularly holy
opponents.
~

0 'DETECT EVIL'~
Syntax: cast 'detect evil'

This spell enables the caster to detect evil characters, which will
reveal a characteristic red aura.
~

0 'DETECT HIDDEN'~
Syntax: cast 'detect hidden'

This spell enables the caster to detect hidden creatures.
~

0 'DETECT INVIS'~
Syntax: cast 'detect invis'

This spell enables the caster to detect invisible objects and characters.
~

0 'DETECT MAGIC'~
Syntax: cast 'detect magic'

This spell enables the caster to detect magical objects.
~

0 'DETECT POISON'~
Syntax: cast 'detect poison' <object>

This spell detects the presence of poison in food or drink.
~

0 'DISPEL EVIL'~
Syntax: cast 'dispel evil' <victim>

This spell invokes the wrath of Mota on an evil victim. It can be very
dangerous for casters who are not pure of heart.
~
0 'DISPEL MAGIC' CANCELLATION~
Syntax: cast 'dispel magic' <character>
        cast 'cancellation' <characte>
 
Both of these spells remove magical effects from the target.  Dispel magic
has a reduced chance of working, and is considering an attack spell.
Cancellation can only be used on allies, but is much more effective and does
not provoke attack.  Unfortunately, the spells do not discriminate between
harmful and benign spells.
 
The chance of dispelling is based on the level of the spell. Permanent spells
(such as mobile sanctuary) are much harder to remove.  Not all spells may
be dispelled, notable examples are poison and plague.
~

0 EARTHQUAKE~
Syntax: cast 'earthquake'

This spell inflicts damage on every enemy character in the room.
Beware that other characters who are not yet fighting may attack
you as a result!
~

0 'ENCHANT WEAPON'~
Syntax: cast 'enchant weapon' <weapon>

This spell magically enchants a weapon, increasing its to-hit and to-dam
bonuses by one or two points.  Multiple enchants may be cast, but as the
weapon grows more and more powerful, it is more likely to be drained or
destroyed by the magic.  Also, every successful enchant increases the level
of the weapon by one...and there is no turning back.
~

-1 'ENCHANT ARMOR'~
The enchant armor spell imbues armor with powerful protective magics. It is
not nearly as reliable as enchant weapon, being far more prone to destructive
effects.  Each succesful enchant increases the plus of the armor by 1 or 2
points, and raises its level by one.
~


0 'ENERGY DRAIN'~
Syntax: cast 'energy drain' <victim>

This spell saps the experience points, mana, and movement points of its
target.
~

0 'FAERIE FIRE'~
Syntax: cast 'faerie fire' <victim>

This spell increases (makes worse) the armor class of its victim.  For each
level of the caster, the victim's armor class is increased by two points.
~

0 'FAERIE FOG'~
Syntax: cast 'faerie fog'

This spell reveals all manner of invisible, hidden, and sneaking creatures in
the same room as you.
~

0 FLAMESTRIKE~
Syntax: cast 'flamestrike' <victim>

This spell inflicts damage on the victim.
~

0 FLY~
Syntax: cast 'fly' <character>

This spell enables the target character to fly.
~

0 IDENTIFY~
Syntax: cast identify <object>

This spell reveals information about the object.
~

0 INFRAVISION~
Syntax: cast infravision <character>

This spell enables the target character to see warm-blooded creatures even
while in the dark, and exits of a room as well.
~

0 INVIS 'MASS INVIS' INVISIBLITY~ 
Syntax: cast 'invisibility' <character>
Syntax: cast 'invisibility' <object>
Syntax: cast 'mass invis'

The INVIS spell makes the target character invisible.  Invisible characters
will become visible when they attack. It may also be cast on an object
to render the object invisible.

The MASS INVIS spell makes all characters in the caster's group invisible,
including the caster.
~

0 'KNOW ALIGNMENT'~
Syntax: cast 'know alignment' <character>

This spell reveals the alignment of the target character.
~

0 'LOCATE OBJECT'~
Syntax: cast 'locate object' <name>

This spell reveals the location of all objects with the given name.
~

0 'PASS DOOR'~
Syntax: cast 'pass door'

This spell enables the caster to pass through closed doors.
~

0 POISON~
Syntax: cast poison <victim>
Syntax: cast poison <object>

This spell reduces the strength of the victim by two, as well as reducing the
victim's regeneration rate. It may also be used to poison food, drink, or
a weapon in a fashion similar to envenom ('help envenom'), but with 
drastically reduced effectiveness.
~

0 SANCTUARY~
Syntax: cast sanctuary  <character>

The SANCTUARY spell reduces the damage taken by the character from any attack
by one half.
~

0 REFRESH~
Syntax: cast refresh <character>

This spell refreshes the movement points of a character who is out of movement
points.
~

0 'REMOVE CURSE'~
Syntax: cast 'remove curse' <character>
Syntax: cast 'remove curse' <object>

This spell removes a curse from a character, and might possibly uncurse
a cursed object.  It may also be targeted on an object in the caster's
inventory, in which case it's chance of success is significantly higher.
~

0 SHIELD 'STONE SKIN'~
Syntax: cast shield
Syntax: cast 'stone skin'

These spells protect the caster by decreasing (improving) the caster's armor
class.  SHIELD provides 20 points of armor.  STONE SKIN provides 40 points of
armor.
~

0 SLEEP~
Syntax: cast sleep <victim>

This spell puts its victim to sleep.
~

0 SUMMON~
Syntax: cast summon <character>

This spell summons a character from anywhere else in the world into your room.
Characters who are fighting may not be summoned.
~

0 TELEPORT~
Syntax: cast <teleport>

This spell takes you from your current location to a random location somewhere
in the world.
~

0 VENTRILOQUATE~
Syntax: cast ventriloquate <speaker> <message>

This spell throws your voice, making it appear that some other object or
character in the room is saying your message.  Victims who make their saving
throw will know that someone is using ventriloquism, but not who.  Victims who
fail their saving throw will think that the object or character really did say
your message.
~

0 NOTE 'NOTE WRITE' 'NOTE READ' BOARD 'NOTE SYSTEM' BOARDS~
Syntax:

board [number|name]                     Shows or changes board.
note                                    Reads next note.
note read [number]                      Reads a certain note.
note remove <number>                    Removes a note written by you.
note list [number]                      Shows up to number notes.
note write                              Posts a note.
note catchup                            Marks all notes in this board read.

These commands are used for the new note system. Instead of just one board, 
there are several, each with its special purpose. 

Changing between the boards is accomplished using the BOARD command. BOARD
without any arguments gives you a list of all boards together with number of
unread message. To change, type BOARD <number> or BOARD <name of the board>.

To read next unread note, type NOTE. To read a note with a specified number,
type NOTE READ <number>. Typing NOTE while in a board with no unread notes
shifts you to the next board. Note that unlike the standard note system, a 
note has the same number in NOTE LIST and NOTE READ.

Posting a message is as simple as writing NOTE WRITE. You will be moved 
into interactive mode, where all you see are prompts for the fields like 
To:, From: etc. You will be automatically put AFK while writing a note.

To see the list of the notes in the current board, type NOTE LIST. Typing
NOTE LIST <number> will list only <number> of the last notes in the area.

You can remove your own note by using NOTE REMOVE <number>. Implementors may
remove other people's notes. Implementors can also select how many days
their note is kept before being purged. Purging happens automatically at
bootup. Purged notes are not deleted, but saved into a file.

To let only immortals see your note, address it to "imm". To let players of
a specific level and above, address it to that level (no other recipients may
appear in that case).

This board system was created by Erwin S. Andreasen, erwin@andreasen.org, aka
Phunk/Drylock and is freely available. The general outlook was based on
Mystic Adventure's note system (mud.gel.ulaval.ca 4000).
~

0 WEAKEN~
Syntax: cast weaken <victim>

This spell reduces the strength of the victim by two points.
~

0 'WORD OF RECALL'~
Syntax: cast 'word of recall'

This spell duplicates the built-in RECALL ability.  It is provided solely for
Merc-based muds which wish to eliminate the built-in ability while still
providing the spell.
~

0 'ACID BREATH' 'FIRE BREATH' 'FROST BREATH' 'GAS BREATH' 'LIGHTNING BREATH'~
Syntax: cast 'acid breath'      <victim>
Syntax: cast 'fire breath'      <victim>
Syntax: cast 'frost breath'     <victim>
Syntax: cast 'gas breath'
Syntax: cast 'lightning breath' <victim>

These spells are for the use of dragons.  Acid, fire, frost, and lightning
damage one victim, whereas gas damages every PC in the room.  Fire and
frost can break objects, and acid can damage armor.

High level mages may learn and cast these spells as well.
~
-1 OLC EDIT~
Syntax: AEDIT   [create/reset] [vnum]	    - Area Creation and Repoping.
Syntax: REDIT   [create/reset] [vnum] 	    - Room Creation and Editing.
Syntax: OEDIT   [create] <vnum>		    - Object Creation and Editing.
Syntax: MEDIT   [create] <vnum>		    - Mobile Creation and Editing.
Syntax: MPEDIT  [create] <vnum>             - MobProg Creation/Editing.
Syntax: HEDIT   [create] <vnum>             - Helpfile Creation/Editing.
Syntax: SKEDIT  [skill]                     - Skill and Spell Creation/Editing.
Syntax: RAEDIT  [race]                      - Race Creation/Editing.
Syntax: SEDIT   [social]                    - Social Creation/Editing.
Syntax: GEDIT   [group]                     - Spell and Skill Group Creation/Editing.
Syntax: CMDEDIT [command]                   - Command Creation/Editing.

Syntax: ASAVE  <world/area/changed/list>    - Save {R*ALL*{x Editing to Disk.
Syntax: ALIST                               - Listing of Areas.
Syntax: WRLIST [type] [lvnum] [uvnum]       - Lists Objects/Resets/Rooms/Mobs.
Syntax: RESET  See Help Resets.	            - Set Game Resets.

Definition: [optional]  <required>  (combined arguments)

     The above commands are used to expand the game world.  The original
code is based on was written by Surreality and installed in The Isles by Locke.
It was then converted to work with Envy by Jason Dinkel, and ported to ROM
2.3 by Hans Birkeland (Hugin). Port to Rom 2.4 by Ivan Toledo (ver 2.01).

     Inside an editor, typing COMMANDS lists working commands and ? gives
help. AEDIT and REDIT default to the current area or room. EDIT ROOM RESET
resets the current room.  Most commands with no arguments display syntax.

See also help: AEDIT REDIT MEDIT OEDIT MPEDIT HEDIT SKEDIT RAEDIT SEDIT GEDIT CMDEDIT
               WRLIST
~

0 ALIST~
Syntax: ALIST

This command gives you a listing of all the areas along with their
vnum assignments and the builder(s) assigned to editing them.
~

0 WRLIST~
Syntax: WRLIST

This command gives you a listing of all the rooms, rooms and their resets,
objects, or mobs within a given vnum range.

wrlist r <lowest vnum> <highest vnum> - Lists rooms.
wrlist rx <lowest vnum> <highest vnum> - Lists rooms and their resets.
wrlist o <lowest vnum> <highest vnum> - Lists objects.
wrlist m <lowest vnum> <highest vnum> - Lists mobiles.
~


0 AEDIT~
Syntax: edit area	 -Enters the editor for the current area.
Syntax: edit area <vnum> -Enters the editor for the selected area.

The following commands are available from within the AEDITOR:

age <number>        - set the age of the area
builder <player>    - toggle that builder's access
commands            - prints a list of possible commands
create              - create a brand new area and switch to it
done                - exits the area editor and returns to normal play
filename <filename> - change the file name for the area (be careful)
name <name>         - change the 'AREAS' name of this area
reset               - resets the current area
security <rating>   - set the security rating for this area
show                - hitting return, or 'show' shows the area stats
vnum <lower> <upper>- set the lower and upper vnum's
lvnum <lower>       - set the lower vnum
uvnum <upper>       - set the upper vnum
<flags>             - area flags, type ? AREA for a list
~

0 HEDIT~
Syntax: hedit <string> 	    -Enters the editor for the specified helpfile.

The following commands are available from within the HEDITOR:

keyword <string>    - specifies the keywords which can be used to invoke the helpfile
text                - enters the text editor
new <number>        - creates a new help file assigned to a new number
level <-1 to 103>   - level at which a character can view the help file
list all            - list all help files in the game
list area           - list all help files in the current area
show                - hitting return, or 'show' shows the help file's stats
delete              - deletes the help file currently being edited 
done                - exits the help editor and returns to normal play

~

0 MPEDIT~
Syntax: mpedit <string>     -Enters the editor for the specified MobProg.

The following commands are available from within the MPEDITOR:

code			  - enters the string editor to input the actions that the MobProg 
			    executes
create <vnum>       - creates a new Mob Prog with the specified VNUM
show                - hitting return, or 'show' shows the mob prog's stats
commands            - prints a list of possible commands
version             - displays version information about the OLC
done                - exits the mob prog editor and returns to normal play

See also help: 'MOB PROGS' 
~

0 RAEDIT~
Syntax: raedit <string>     -Enters the editor for the specified race.

name                - sets the name of the race
pcrace              - determines if the race is playable by PCs or not
act <flag>          - race's action flags
aff <flag>          - race's affects flags
off <flag>          - race's off attack flags
res <flag>          - race's resistance flags
vuln <flag>         - race's vulnerability flags
imm <flag>          - race's immunity flags
form <flag>         - sets the race's body form flag
part <flag>         - sets body parts that can be cut off in combat
who <string>        - sets how race name will appear in who list
points <number>     - amount of creation points used
cmult <class>       - experience multiplier for the class
stats <stat>        - set stats for the race
  <value>
maxstats <stat>     - set maximum stats for the race
  <value>
skills <number>     - set racial skills, maximum of 4
  <skill>
size <size>         - set race's size
list                - lists all PC and NPC races in the game
commands            - prints a list of possible commands
version             - displays version information about the OLC
done                - exits the race editor and returns to normal play
~

0 SKEDIT~
Syntax : skedit <skill>    -Enters the editor for the specified skill or spell.

name                - sets the name of the skill
beats <number>      - delay of the skill (4 beats=1 second)
position <position> - sets the minimum position in which the skill/spell can 
                      be used
slot <number>       - used for spells to index for magical objects
target <flags>      - designates who can be targeted by the skill/spell
mana <number>       - sets the amount of mana used by the spell
level <class>       - level at which the specified class gets the skill/spell
  <level>
rating <class>      - sets the difficulty of learning the spell/skill for
  <level>             the specified class
gsn <name-of-gsn>   - sets the global skill/spell number, used for ones 
gsn null              frequently referenced in the game
spell <name-of-spell> - designates a spell as a spell, unused by skills
spell spell_null
noun <string>       - sets the noun or noun phrase containing the damage message
                      for skills or spells that deal damage
off <string>        - the message sent to the character when the skill/spell wears
                      off
obj <string>        - wear-off message for the skill/spell on an object
new <name-of-the-new-skill> - creates a new skill or spell
list <gsns/skills/spells/slots> - lists all of the gsns, skills, spells, or slots 
                                  in the game
show                - hitting return, or 'show' shows the skill's/spell's stats
commands            - prints a list of possible commands
version             - displays version information about the OLC
done                - exits the skill editor and returns to normal play
~

0 SEDIT~
Syntax : sedit <social>    -Enters the editor for the specified social.

cnoarg              - what the player sees, without an argument
onoarg              - what others see, without an argument
cfound              - what the player sees, with a target
ofound              - what others see, with a target
vfound              - what the victim sees, with a target
cself               - what the player sees, target is the player
oself               - what others see, target is the player
new <social>        - creates a new social with the specified name
show                - hitting return, or 'show' shows the social's stats
commands            - prints a list of possible commands
version             - displays version information about the OLC
done                - exits the social editor and returns to normal play
~

0 GEDIT~
Syntax : gedit <group>    -Enters the editor for the specified group of skills/spells.

name <name>         - sets the name of the group
rating <class>      - sets the cost of learning the group for the different classes
  <cost>
spell new <name>    - adds/deletes skills/spells in the group
spell delete <name>
list                - lists all groups in the game
show                - hitting return, or 'show' shows the group's stats
commands            - prints a list of possible commands
done                - exits the social editor and returns to normal play
~

0 CMDEDIT~
Syntax : cmdedit <command>    -Enters the editor for the specified command.

name                - sets the name of the command
function            - assigns the command to the proper function to execute
level               - what level the player must be to use this command
position <position> - minimum position allowed to use this command
log <flag>          - sets if the use of the command is logged or not
type <flag>         - sets the type of command
new <name>          - new command with specified name
delete <name>       - delete the command with specified name
list                - list all commands/functions within specified range
show                - hitting return, or 'show' shows the command's stats
commands            - prints a list of possible commands
version             - displays version information about the OLC
done                - exits the command editor and returns to normal play
~

0 ADDPROG~
Syntax: addprog [vnum] [trigger] [phrase]     -Adds a specified mob prog to a mob.

List of all triggers and the appropriate phrase/argument for it:

{GACT{x
Keyword	: 'act'
Argument: string

	The argument is a phrase, a text string. The trigger is activated
whenever the phrase is contained in the	act() message.

NOTE:  	Most general trigger. Applies to almost every event which happens
	in the mud. Anytime the function act() is called with a message
	to be delivered TO_CHAR,TO_VICT,TO_ROOM,etc. the act can be
	triggered.  Basically this will trigger on almost everything
	you'll ever want. Output of "say", "shout" and "emote" do not
	trigger this event.

{GSPEECH{x
Keyword : 'speech'
Argument: string

NOTE:  	This is only triggered when the phrase is contained in a
	message which has been said by a PC in the same room as the mob.
	The PC restriction is not necessary, but makes infinite loops
	between two talking mobiles impossible. It also makes it impossible
	for two NPC's to stand and discuss the weather however. 

{GRANDOM{x
Keyword : 'random'
Argument: number

	The argument is a number betweeen 0 and 99 inclusive.

NOTE:  	This trigger is checked at each PULSE_MOBILE and if the argument is
	greater than a percentage roll the trigger is activated. This
	will happen even if there is no PC in the room with the mob,
	but there must be players in the same area. 
	It is useful to give mobiles a bit of a personality. For instance
	a janitor who stops to spit tobacco, or complain about the hours,
	or wonder why there are no woman janitors on muds, or a fido which
	barks or growls or pees on the curb is much more alive than one
	which just sits there scavenging.
	Note that this trigger is checked only when there are players in
	the area. If you want this event to be triggered always, you must
	set the ACT_UPDATE_ALWAYS flag of the mobile.

{GGREET/GREET ALL{x
Keyword : 'greet'
Argument: number

	Again a percentage argument.

NOTE:  	Whenever someone enters the room with the mobile, and the mobile saw
	the person enter, this is checked. Good for shopkeepers who want
	to welcome customers, or for pseudo-aggressive mobiles which need to
	discriminate on who they attack.
	Greet trigger activates only when the mobile is not busy (fighting,
	sitting, sleeping etc.). If you want to be sure to catch all players,
	use grall.

Keyword : 'grall'
Argument: number

	Again a percentage argument.

NOTE:  	Like greet, but it can be triggered even if the mobile didn't
	see the	arrival (i.e. sneak, invis, etc) or is busy. Most useful for
	faking teleport rooms or for impassable guardians.
	
{GENTRY{x
Keyword : 'entry'
Argument: number

	Again a percentage argument.

NOTE:  	The opposite of greet trigger. Whenver the mobile itself enters a new
	room, this can be triggered.  Useful for looking around, or waving
	or other things that real PCs do when they arrive at a crowded room.
	IMPORTANT: In an entry program, the mobile can only refer to a
	random pc ($r in if checks) -- there's no way to know how many PCs
	exist in the room the mobile enters! Also, you must check visibility
	of the target in your program.

{GEXIT/EXIT ALL{x
Keyword : 'exit'
Argument: number

	Argument is the exit number (0:north, 1:east, 2:south 3:west etc.)

NOTE:  	The opposite of entry trigger. This is activated when PC tries to
	leave a room through an exit indicated by the argument, and the
	mobile sees the person leave. Useful for having a single guardian to
	watch several exits. An exit trigger works better than an entry
	trigger, since you can refer to a specific PC instead of a random PC.
	IMPORTANT: If this event is triggered, the victim will not move
	through the exit. If necessary, you must move the character yourself
	in your program (see MOB TRANSFER/MOB GTRANSFER). Also, this event
	is not triggered when a character flees from combat or the mobile
	is not in its default position.

Keyword : 'exall'
Argument: number

	Argument is the exit number (0 = north etc.)

	The same as exit trigger, but it can be triggered even if the
	mobile cannot see the person trying to leave the room or if
	the mobile is busy.

{GGIVE{x 
Keyword : 'give'
Argument: string or object vnum

	The argument is either the a string containing words to be
	matched against the keywords of the object, or the word "all";
	e.g. argument "long sword" will match to objects "long bow" and
	"small sword".
	Alternatively, the argument can be the virtual number of a single
	object.

NOTE:  	This is triggered whenever something is given to the mobile.  Best
	used for quests.  Since the first successful trigger is the only one
	of this type which is processed, having an "all" argument in the
	script at the end of the MOBprogram list is essentially a default
	response.

{GBRIBE{x
Keyword : 'bribe'
Argument: number

	The argument is any positive integer number.

NOTE:  	This trigger is activated whenever money is given to the mobile.
	If the amount given exceeds the number, then process the commands.
	Note again, that an argument of '1' would act as a default response.
	Also note that if the script is not triggered (because of too little
	money having been given), the mobile still keeps the money...

	ROM 2.4 NOTE: Since ROM 2.4 has two different types of currency
	(gold and silver coins), for bribe trigger the amount to be given
	is converted to silver coins with the rate of 1 gold = 100 silver.
	Thus, the number in the argument should be the expected amount in
	silver coins.

{GKILL{x
Keyword : 'kill'
Argument: number

	The argument is a percent once again.

NOTE:  	This trigger is checked whenever a PC attacks the mobile. The check
	occurs only ONCE, in the beginning of combat. Useful for summoning
	assistance etc. (See MOB MLOAD).

{GFIGHT{x
Keyword : 'fight'
Argument: number

	The argument is a percentage.

NOTE:  	Useful for giving mobiles combat attitude. It is checked every
	PULSE_VIOLENCE when the mobile is fighting. Can be used to cast
	spells (see MOB CAST), curse at the opponent, or whatever. Only the
	first successful one will be processed to save time.  Also, this
	means that the mobile wont get lucky and 1. curse, cast a fireball
	and 2. spit on the player, cast another fireball in the same pulse.

{GHIT POINT PERCENTAGE{x
Keyword : 'hpcnt'
Argument: number

	The argument is a percentage.

NOTE:  	Is activated at each PULSE_VIOLENCE when the mobile is fighting. It
	checks to see if the hitpoints of the mobile are below the given
	percentage. Multiple hpcnt triggers should be listed in increasing
	order of percent since a 40% will always be activated before a 20%
	and, only the first successful trigger is performed. (See also
	MOB FLEE).

{GDEATH{x
Keyword : 'death'
Argument: number

	The argument is a percent once again.

NOTE:  	When the mobile dies, if the random percentage is less than the
	argument the mobile performs the MOBprogram commands rather than the
	usual death_cry() sequence.  This is done before the corpse is made,
	so the commands can be considered the mobiles last gasp. It could
	perhaps	destroy the items it was holding (see MOB REMOVE and MOB
	JUNK), or create some (see MOB OLOAD), or cast a spell (see MOB
	CAST) on the killer and the room, or even goto a new location (see
	MOB GOTO) and die there (with a text message, the corpse would seem
	to vanish) The position of the mobile is set to STANDING, and so it
	can do all the normal commands, without worrying about being DEAD.
	However, even if the mobile restores itself to full hitpoints, it
	will still die.
	This is not a way to immortal mobiles. However, the last thing this
	mobile does could be to goto some vacant room, load a fresh version
	of itself, drop all its items, force the new mobile to get all the
	items and wear them, send the new mobile back to the character who
	killed it and force the new mobile to attack that character. Along
	with a text message which said the mobile restored itself, this
	might be a convincing effect. (Note that your kitten could turn into
	a dragon this way too).


{GDELAY{x
Keyword : 'delay'
Argument: number

	The argument is a percentage chance.

NOTE:  	This trigger activates when the delay of a mobile (set with the
	MOB DELAY command) expires. This trigger can be used to create
	staged mobile behavior, for example, a guardian could see a
	player entering a room, give a warning and activate a delay.
	If the player is still present when the delay expires, the
	guard would attack the player. (See also MOB REMEMBER).
	A mobile can have several delay triggers, but every time the
	delay timer expires, all the triggers are checked and the first
	successful one executed.

{GSURRENDER{x
Keyword : 'surr'
Argument: number

	The argument is a percentage.

NOTE:	This trigger activates when the mobile is fighting and the
	opponent issues a "surrender" command. When triggered, both parties
	will cease fighting, and the mobile can accept the surrender
	(perhaps taking all equipment from the character with MOB REMOVE).
	Note that if the mobile does not accept the surrender, it must
	resume fighting with MOB KILL.
	If a character surrenders and the mobile does not have a surrender
	trigger, or the trigger does not activate, the fight resumes
	normally.

NOTE: No MOBprograms will be successful when the mobile is charmed
(since it has no self volition, it should act like it has none) to protect
mobiles which are given special powers from being implemented by a player.


See also help: 'MOB PROGS' 
~

0 'MOB PROGS' 'MOB PROGRAMS' 'MOBILE PROGRAMS'~
{/Mob Progs are most easily described as scripts of actions that cause
a mob to do something in response to a trigger action by either a PC or 
even another NPC.  The intent is to make the game world of the MUD to
be more interactive with the players, and make mobs something more than 
just a punching bag that players use to gain experience and items off of.

Creating and using Mob Progs is a two step process.  First of all, 
you must create a new Mob Prog using {GMPEDIT{x that defines the script of 
action that your mob will execute.  You must first choose an appropriate 
VNUM for your Mob Prog, and then define the code of the program, for 
example "say Hello, good sir!" (dont use the quotations.)

Then, you must edit the mob that you want to execute the program
so that it will actually use it.  This is done by entering the {GMEDITOR{x
for the mob, and then using the {GADD{x command. 

{G(Syntax:   add [vnum] [trigger] [phrase]){x

You must choose the appropriate VNUM for your Mob Prog, and then 
define the type of trigger which will cause it to activate (for example, 
if you want it to activate when someone drops a particular item, or 
says a particular phrase, or just whenever someone enters the room.)  
Finally, you must define the exact argument for the trigger, such as 
"hello" (again ignore the quotations).  The argument will vary in its 
content depending upon the type of trigger, sometimes it can be a 
percentage, so that the trigger is only activated randomly.

An example for adding a program to a mob:
{Gadd 42900 speech hello{x

This will cause trigger number 42900 to activate whenever someone 
says hello in the room.  If you need further assistance, don't 
hesitate to ask an IMM or post a note on the board if one is not 
currently available.
~


0 REDIT~
Syntax: edit room		-Enters the editor for the current room.

The following commands are available from within the REDITOR:

commands            - prints a list of possible commands
create <vnum>       - creates a room with a certain vnum
desc                - edit description of room
done                - exists the room editor and returns to normal play
ed                  - type this command for additonal extra-description help
format              - format(wordwrap) the room description
name <room title>   - changes the room title
show                - hitting return, or 'show' shows the room stats
oshow <vnum>        - shows an object with given vnum
olist               - lists objects in this area.
mshow <vnum>        - shows a mobile with given vnum
mlist               - lists mobiles in this area.
room <flags>        - room attributes, type ? ROOM for a list
sector <type>       - terrain of room, type ? SECTOR for a list
<direction>         - see help EXIT, or type <dir> ?
~

0 EXIT~
For exits, type the direction (north/s/e/w) followed by:

dig <vnum>         - creates the room and makes a two way link
link <room vnum>   - make a two way link
room <room vnum>   - make a one way link (use with caution)
key <object vnum>  - makes specified object the vnum of the key required
name <door name>   - makes the door's name/keywords = to the given name
desc               - edit the description of the exit
delete             - delete this exit
<exit-flags>       - type ? EXIT for a list(make exit door, locked etc.)

The exit flags are presented in the following manner.  The capitalized
flags are ones not included in the reset info.  i.e. closed is due to
a player closing the door and not due to the door being set to be closed.

-South to [ 3744] Key: [   -1] Exit flags: [door CLOSED bashed pickproof]
~

0 OEDIT~
Syntax: edit object <vnum>	-Enters the editor for the selected object.

The following commands are available from within the OEDITOR:

addaffect           - applies an affect to an object, no args for help
delaffect           - removes an affect to an object, no args for help
commands            - prints a list of possible commands
cost <gold>         - sets the gold value of the object
create <vnum>       - creates object with specified vnum
done                - exits the object editor and returns to normal play
ed                  - type this for info on adding/editing extended descripts
long                - edit long description (the one in the room)
name <keywords>     - sets the keywords on an object
short <desc>        - sets the 'name' of an object (a sword, a fish etc)
show                - hitting return, or 'show' shows the object stats
v0 <num>            - sets the value '0' on the object
v1 <num>            - sets the value '1' on the object
v2 <num>            - sets the value '2' on the object
v3 <num>            - sets the value '3' on the object
v4 <num>            - sets the value '4' on the objcet
weight <num>        - sets the weight of the object
type         	    - type of object, type ? TYPE for a list
extra		    - attributes of object, type ? EXTRA for a list
wear                - where object is worn, type ? WEAR for a list
material            - material the object is made from
~

0 MEDIT~
Syntax: medit <vnum>		-Enters the editor for the selected mobile.

The following commands are available from within the MEDITOR:

alignment <value>   - set the mobile's alignment
commands            - prints a list of possible commands
create <vnum>       - creates mobile with specified vnum
desc                - edit the mobile's description (when looked at)
done                - exits the mobile editor and returns to normal play
level <level>       - set the mobile's level
long                - edit long description (the one in the room)
name <keywords>     - sets the keywords on an mobile
shop                - type this command for further information
short <desc>        - sets the 'name' of an mobile (a sword, a fish etc)
show                - hitting return, or 'show' shows the mobile stats
spec                - sets a mobiles spec proc, type ? SPEC for a list
sex                 - set the mobile's sex, type ? SEX for a list
act                 - mobiles actions, type ? ACT for a list
affect              - mobile affects, type ? AFFECT for a list
ac		    - set the mobile's ac, type ? AC for a list
form		    - mobiles body-form, type ? FORM for a list
part		    - mobiles bodyparts, type ? PART for a list
imm		    - mobile is immune to, type ? IMM for a list
res		    - mobile is resistant to, type ? RES for a list
vuln		    - mobile is vulnerable to, type ? VULN for a list
material	    - material mobile is made from, type ? MATERIAL for a list
off		    - offensive behaviour, type ? OFF for a list
size		    - size, type ? SIZE for a list
hitdice		    - dice to toss to get mobile's hitpoints
manadice	    - dice to toss to get mobile's mana
damdice		    - dice to toss to get mobile's hand to hand damage
wealth <amount> - amount of money given by mob upon death (in silver)
addprog         - adds a mob prog to the mob, see also help: ADDPROG
delprog <number> - deletes the mob prog of the specified number, see 
                   also help: ADDPROG

type 'help HITDICE', 'help MANADICE', 'help DAMDICE' for lists of reasonable dice 
combinations on different levels.
~

0 HITDICE~
A high number of dice makes for less variance in mobiles hitpoints.
Suggested values are:

       level:     dice         min         max        mean
         1:       1d2+6       7(  7)     8(   8)     8(   8)
	 2:       1d3+15     16( 15)    18(  18)    17(  17)
	 3:       1d6+24     25( 24)    30(  30)    27(  27)
	 5:      1d17+42     43( 42)    59(  59)    51(  51)
	10:      3d22+96     99( 95)   162( 162)   131( 129)
	15:      5d30+161   166(159)   311( 311)   239( 235)
	30:     10d61+416   426(419)  1026(1026)   726( 723)
	50:    10d169+920   930(923)  2610(2610)  1770(1767)

Diff = max - min.  Mean is the arithmetic mean.
The values in parenthesis are the the standard merc values.
~

0 MANADICE~
A high number of dice makes for less variance in mobiles mana.
The values the server generates for merc-type mobs is

  <level> d 10 + 100

where level is the level of the mobile.
~

0 DAMDICE~
A high number of dice makes for less variance in mobiles hitpoints.
Suggested values are:

       Level      dice       min      min    mean
        1         1d2+0       1        2       2
        2         1d2+1       2        3       3
        3         1d3+2       3        5       4
        5         2d3+2       4        8       6
       10         2d5+5       7       15      11
       15         3d5+8      11       23      17
       20         4d5+10     14       30      22
       30         5d6+15     20       45      33
       50         5d10+25    30       75      53

Mean is the arithmetic mean.  The values in parenthesis are the the
standard merc values.  (Will be put in when there's time to calculate
them...)
~

0 RESETS~
Syntax: RESET <number> OBJ <vnum> <location on body>    - equips last mobile
        RESET <number> OBJ <vnum> inside <obj vnum>     - store in container
        RESET <number> OBJ <vnum> room                  - store in room
        RESET <number> MOB <vnum> [<max #>]             - load a mobile
        RESET <number> DELETE                           - delete a reset

RESET alone will display the resets in the current room.  The <number> will
be displayed with this list.  Typing ? WEAR-LOC will list possible locations
that an object can be loaded to.  The [<max #>] is the maximum number of
mobiles allowed in this room and will default to 1 if no number is entered.

For resets to be successful make sure that you add them in a logical order.
For example if you are equiping a mobile don't load a container in the room
and fill it with some objects and then continue equiping the mobile.  It is
likely that resets will backfire if they are not carefully entered.

If you wish to reset the room then use EDIT ROOM RESET.  
~

0 MOB_AC~
The values ROM generates for a merc format mob is:

   level      pierce    bash    slash   exotic
     1          95       95       95      95
     5          70       70       70      85
    10          40       40       40      70
    15           5        5        5      55
    20         -25      -25      -25      40
    25         -55      -55      -55      20
    30         -90      -90      -90       5
    35        -120     -120     -120     -10
    40        -150     -150     -150     -25
    45        -180     -180     -180     -40
    50        -215     -215     -215     -55
    55        -245     -245     -245     -70
    60        -275     -275     -275     -90
    65        -305     -305     -305    -105
    70        -340     -340     -340    -120
    80        -400     -400     -400    -150

These values are 10 times what you would put in an area file. This
is because the server multiplies what it reads from file with 10.
~

0 ITEM_LIGHT~
.   value 0    unused
   value 1    unused
   value 2    hours of light available, 0 is dead, -1 or 999 is infinite            
   value 3    unused
   value 4    unused
~

0 ITEM_STAFF_WAND~
.   value 0    level
   value 1    max charges
   value 2    current charges
   value 3    spell name
   value 4    unused


An up-to-date list of spells can be obtained by typing:
? SPELLS [ignore/attack/defend/self/object/all]
~

0 ITEM_SCROLL_POTION_PILL~
.   value 0    level
   value 1    spell name 1
   value 2    spell name 2
   value 3    spell name 3
   value 4    unused

An up-to-date list of spells can be obtained by typing:
? SPELLS [ignore/attack/defend/self/object/all]
~

0 ITEM_ARMOR~
.   value 0    ac pierce
   value 1    ac bash
   value 2    ac slash
   value 3    ac exotic (magic)
   value 4    unused
~

0 ITEM_WEAPON~
.   value 0    weapon class.
   value 1    number of dice to roll.
   value 2    type of dice to roll.
   value 3    weapon type.
   value 4    special weapon type.

An up-to-date list of values can be obtained by typing
? WCLASS
help WEAPON_DICE
? WEAPON
? WTYPE
~

0 WEAPON_DICE~
These are the values the server generates automatically when
converting a merc-format mobile to ROM format.  A higher
number of dice gives less variance in damage.  There is no
dice-bonus on weapon dice.

      level:   dice 
        1:     1d8
        2:     2d5
        3:     2d5
        5:     2d6
       10:     4d5
       20:     5d5
       30:     5d7
       50:     5d11
~

0 ITEM_CONTAINER~
.   value 0    weight capacity
   value 1    flags: closeable, pickproof, closed, locked            
   value 2    key vnum
   value 3    unused
   value 4    unused

An up-to-date list of flags can be obtained by typing
? CONTAINTER
~

0 ITEM_DRINK~
.   value0    capacity
   value 1    current quantity
   value 2    liquid type
   value 3    poisoned?
   value 4    unused

An up-to-date list of liquid types can be obtained by typing
? LIQUID
~

0 ITEM_FOOD~
.   value 0    hours of food value
   value 1    unused
   value 2    unused
   value 3    poisoned?
   value 4    unused
~

0 ITEM_MONEY~
.   value 0    value in gold pieces
   value 1    unused
   value 2    unused
   value 3    unused
   value 4    unused
~


0 $~



#$
